# SPDX-License-Identifier: MIT

import numpy as np
from m1n1.ane.ane_utils import ez_pack

def get_conv2d_dims(
            filters=1, kernel_size=1, stride=1, 
            dilation_rate=1, padding='valid',
            batch_size=1, input_channels=5, input_size=8,
            ):

    input_dim = (batch_size, input_channels, input_size, input_size)
    weight_dim = (filters, input_channels, kernel_size, kernel_size)

    kernel_size_dilated = (kernel_size - 1) * dilation_rate + 1
    out_spatial_size = (input_size - kernel_size_dilated) // stride + 1
    output_dim = (batch_size, filters, out_spatial_size, out_spatial_size)
    return input_dim, weight_dim, output_dim


def compile_conv2d(input_size, input_channels=5):
    base = np.array(
      [0x2000000, 0x0, 0x422, 0x0, 0xfff86a, 0x0, 0x30009800, 0x0,
       0x1024025, 0x21, 0xf401f800, 0x40, 0x0, 0x81, 0x80, 0x80, 0x80,
       0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
       0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
       0x0, 0x0, 0x0, 0x0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
       0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80,
       0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c000000, 0x20002,
       0x1, 0x22, 0x5, 0x1, 0x20002, 0x1, 0x5000a021, 0x2041, 0x10001,
       0x2, 0x0, 0x0, 0x4044405, 0x100000, 0x0, 0x6c013800, 0x33881,
       0x8880, 0x0, 0x40, 0x80, 0x280, 0x280, 0x0, 0x0, 0x0, 0x0, 0x0,
       0x0, 0x0, 0x1002031, 0x0, 0x100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
       0x0, 0x0, 0x0, 0x0, 0x44004800, 0x0, 0x500172, 0x0, 0x10, 0x50,
       0x50, 0x50, 0x0, 0x0, 0x0, 0x0, 0x0, 0x500172, 0xa0, 0x10, 0x20,
       0x10, 0x10, 0xc008800, 0x0, 0x0, 0x0, 0x0, 0x1000c800, 0x82,
       0x101c00, 0x0, 0x0, 0x3c00, 0x18017800, 0xc1, 0x0, 0x40, 0x80,
       0x80, 0x80, 0x1302031])
    
    base = conv2d_t(base, input_size, input_channels)
    return ez_pack(list(base))



def conv2d_t(base, x, y):
    # verified 1 <= x <= 1000 for y == 5
    
    base[0x4//4] = x4_func(x)
    base[0xb4//4] = xb4_func(y)
    
    base[0x128//4] = x128_func(x)
    base[0x134//4] = x134_func(y)
    base[0x13c//4] = x13c_func(x)
    
    base[0x150//4] = x150_func(x)
    base[0x15c//4] = x15c_func(x)
    
    base[0x178//4] = x178_func(x)
    base[0x17c//4] = x17c_func(x)
    base[0x180//4] = x180_func(x, y)
    base[0x184//4] = x184_func(x, y)
    
    base[0x1f0//4] = x1f0_func(x, y)
    base[0x1f4//4] = x1f4_func(x, y)
    base[0x1f8//4] = x1f8_func(x, y)
    base[0x1ec//4] = x1ec_func(x)
    
    base[0x210//4] = x210_func(x)
    base[0x214//4] = x214_func(x, y)
    
    base[0x218//4] = x218_func(x)
    base[0x21c//4] = x21c_func(x)
    base[0x220//4] = x220_func(x)
    base[0x224//4] = x224_func(x)
    
    base[0x258//4] = x258_func(x)
    base[0x260//4] = x260_func(x)
    
    base[0x264//4] = x264_func(x)
    base[0x268//4] = x268_func(x)
    base[0x26c//4] = x26c_func(x)
    return base

def xb4_func(y):
    return 64 + ((y-1)// 32)*64

def x128_func(x):
    return 0x10001 * x

def x134_func(y):
    return y

def x13c_func(x):
    return 0x10001 * x

def x150_func(x):
    return x

def x15c_func(x):
    mapping = [0x4011101, 0x4021101, 0x4031101, 0x4041101, 0x4044405]
    if (x < 9): return mapping[4]
    cycle = np.array([2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
                       1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
                       3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3])
    return mapping[cycle[(x-9)%64]]

def x178_func(x):
    x -= 1
    return ((x//32)+1)* 64

def x26c_func(x):
    def x26c_fprime(x):
        if (x % 32 == 0):
            return (x//32)*0x840 + 64
        return ((x//32)+1)*64
    delta = np.array([x26c_fprime(x2) for x2 in range(x)])
    ydata = np.cumsum(np.array([64] + list(delta))) - 64
    return ydata[x]

def x268_func(x):
    return x26c_func(x)

def x264_func(x):
    return x26c_func(x)

def x260_func(x):
    return (((x-1)//32)+1)*64
    
def x258_func(x):
    cycle = np.array([0x40000c1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
                       0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
                       0xc1, 0xc1, 0xc1, 0xc1, 0x40000c1, 0x40000c1, 0x40000c1, 0x40000c1,
                       0x40000c1, 0x40000c1, 0x40000c1])
    return cycle[(x%32)]

def x1ec_func(x):
    return min((((x-1)//8) + 1)*0x10, 0x80)

def x1f0_func_from_chan(y):
    y -= 2
    cycle = np.array([ 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
                       16, 48,  0,  0, 16, 16, 16, 16, 16, 16, 16, 64,  0,  0,  0, 16, 16,
                       16, 16, 16, 16, 16, 48,  0,  0, 16, 16, 16, 16, 16, 16, 16, 16, 16,
                       16, 16, 16, 16, 16, 16, 16, 16, 96,  0,  0,  0,  0])
    prev = np.sum(cycle) * (y // 64)
    curr = np.sum(cycle[:(y % 64)])
    return prev + curr + 48

def x1f0_func(x, y):
    if (y == 5):
        return min((((x-1)//8) + 1)*(y*0x10), 0x280)
    return x1f0_func_from_chan(y)

def x1f4_func(x, y):
    if (y == 5):
        return x1f0_func(x, y)
    return 0x10 * y

def x1f8_func(x, y):
    if (y == 5):
        return x1f0_func(x, y)
    return 0x10 * y

def x210_func(x):
    cycle = np.array([0x500172, 0x500172, 0x500172, 0x500172, 0x500172, 0x500172,
                       0x500172, 0x500172, 0x500172, 0x500172, 0x500172, 0x500172,
                       0x500172, 0x500172, 0x500172, 0x500172, 0x500172, 0x500172,
                       0x500172, 0x500172, 0x500172, 0x500172, 0x500172, 0x500172,
                       0x50017a, 0x50017a, 0x50017a, 0x50017a, 0x50017a, 0x50017a,
                       0x50017a, 0x50017a])
    return cycle[((x-1)%32)]

def x214_func(x, y):
    x -= 1
    delta = []
    for count in range(7):
        unit = [(count+1)*(0x10*y)]*7 + [(0x10*y)+((count+1)*(0x280+(0x10*y)))]
        delta += unit
    delta += [0x280]*(x+20)
    delta = np.array(delta)
    ydata = np.cumsum(np.array([0x10*y] + list(delta)))
    return ydata[x]

def x17c_func(x):
    def x17c_fprime(x):
        if (x % 32 == 0):
            return ((x//32))*0x840 + 0x40
        return ((x//32)+1)*0x40
    delta = np.array([x17c_fprime(x2) for x2 in range(0, x+2)])[:-1]
    ydata = np.cumsum(np.array([0x80] + list(delta))) - 0x80
    return ydata[x]

def unk_func1(x):
    def unk_func1_fprime(x):
        if (x % 32 == 0): 
            return ((x//32)+1)*0x2940 - 0x2800
        return (((x-1)//32)+1)*0x140
    delta = np.array([unk_func1_fprime(x2) for x2 in range(0, x+2)])[:-1]
    ydata = np.cumsum(np.array([0x230] + list(delta))) - 0x230
    return ydata[x]

def x184_func(x, y):
    if (y == 5):
        return unk_func1(x)
    return y * 0x100

def x180_func(x, y):
    if (y == 5):
        return unk_func1(x)
    return y * 0x100

def x224_func(x):
    if (x < 64):
        imtired = np.array([0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20,
                           0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
                           0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x50, 0x50,
                           0x50, 0x50, 0x50, 0x50, 0x50, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
                           0x60, 0x60, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x0,
                           0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80])
        return imtired[(x-2)]
    cycle = np.array([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x80, 0x80, 0x80,
                       0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                       0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80])
    return cycle[((x+7) % 32)]

def x220_func(x):
    return x224_func(x)
    
def x218_func(x):
    return x224_func(x)

def x21c_func(x):
    if (x < 64):
        imtired = np.array([0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                           0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
                           0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x50, 0x50,
                           0x50, 0x50, 0x50, 0x50, 0x50, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
                           0x60, 0x60, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x0,
                           0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90])
        return imtired[(x-2)]
    cycle = np.array([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                       0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x80, 0x80, 0x80,
                       0x80, 0x80, 0x80, 0x80, 0x80, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0,
                       0xa0, 0xa0])
    return cycle[((x+7) % 32)]


def x4_func(x):
    x -= 2
    vals = np.array([0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
       0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
       0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
       0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
       0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2,
       0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,
       0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3,
       0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4,
       0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5,
       0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x7, 0x7, 0x7,
       0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x8, 0x8,
       0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8,
       0x8, 0x8, 0x9, 0xa, 0xa, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb,
       0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xb, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc,
       0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xf, 0xf, 0xf, 0xf,
       0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0x10, 0x10, 0x10, 0x10, 0x10,
       0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11,
       0x11, 0x11, 0x11, 0x11, 0x11, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,
       0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
       0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16,
       0x16, 0x16, 0x16, 0x17, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
       0x1a, 0x1a, 0x1a, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b,
       0x1b, 0x1b, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c,
       0x1c, 0x1d, 0x1d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21,
       0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, 0x22,
       0x22, 0x22, 0x22, 0x22, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
       0x23, 0x24, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28,
       0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2a,
       0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2b, 0x2b, 0x2b, 0x2b,
       0x2b, 0x2f, 0x2f, 0x2f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
       0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32,
       0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
       0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
       0x39, 0x3a, 0x3a, 0x3a, 0x3a, 0x3a, 0x3a, 0x3a, 0x3b, 0x3b, 0x3b,
       0x3b, 0x3b, 0x3b, 0x3b, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x41,
       0x41, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x43, 0x43, 0x43,
       0x43, 0x43, 0x43, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x45,
       0x45, 0x45, 0x45, 0x45, 0x45, 0x46, 0x46, 0x46, 0x46, 0x4b, 0x4b,
       0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d,
       0x4d, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4f, 0x4f, 0x4f, 0x4f,
       0x4f, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x51, 0x56, 0x56, 0x56,
       0x57, 0x57, 0x57, 0x57, 0x57, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
       0x59, 0x59, 0x59, 0x59, 0x59, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
       0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5c, 0x62, 0x62, 0x62, 0x62,
       0x62, 0x63, 0x63, 0x63, 0x63, 0x63, 0x64, 0x64, 0x64, 0x64, 0x64,
       0x64, 0x65, 0x65, 0x65, 0x65, 0x65, 0x66, 0x66, 0x66, 0x66, 0x66,
       0x67, 0x67, 0x67, 0x67, 0x67, 0x68, 0x6e, 0x6e, 0x6e, 0x6e, 0x6f,
       0x6f, 0x6f, 0x6f, 0x70, 0x70, 0x70, 0x70, 0x70, 0x71, 0x71, 0x71,
       0x71, 0x71, 0x72, 0x72, 0x72, 0x72, 0x72, 0x73, 0x73, 0x73, 0x73,
       0x73, 0x74, 0x74, 0x74, 0x74, 0x7b, 0x7b, 0x7b, 0x7b, 0x7c, 0x7c,
       0x7c, 0x7c, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7e, 0x7e, 0x7e, 0x7e,
       0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81,
       0x81, 0x81, 0x81, 0x81, 0x89, 0x89, 0x89, 0x89, 0x89, 0x8a, 0x8a,
       0x8a, 0x8a, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8c, 0x8c, 0x8c, 0x8c,
       0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8e, 0x8e, 0x8e, 0x8e, 0x8f, 0x8f,
       0x8f, 0x8f, 0x90, 0x97, 0x97, 0x97, 0x98, 0x98, 0x98, 0x98, 0x99,
       0x99, 0x99, 0x99, 0x9a, 0x9a, 0x9a, 0x9a, 0x9b, 0x9b, 0x9b, 0x9b,
       0x9b, 0x9c, 0x9c, 0x9c, 0x9c, 0x9d, 0x9d, 0x9d, 0x9d, 0x9e, 0x9e,
       0x9e, 0x9e, 0xa6, 0xa6, 0xa7, 0xa7, 0xa7, 0xa7, 0xa8, 0xa8, 0xa8,
       0xa8, 0xa9, 0xa9, 0xa9, 0xa9, 0xaa, 0xaa, 0xaa, 0xaa, 0xab, 0xab,
       0xab, 0xab, 0xac, 0xac, 0xac, 0xac, 0xad, 0xad, 0xad, 0xad, 0xae,
       0xae, 0xb6, 0xb6, 0xb6, 0xb7, 0xb7, 0xb7, 0xb8, 0xb8, 0xb8, 0xb8,
       0xb9, 0xb9, 0xb9, 0xb9, 0xba, 0xba, 0xba, 0xba, 0xbb, 0xbb, 0xbb,
       0xbb, 0xbc, 0xbc, 0xbc, 0xbc, 0xbd, 0xbd, 0xbd, 0xbd, 0xbe, 0xbe,
       0xc7, 0xc7, 0xc7, 0xc7, 0xc8, 0xc8, 0xc8, 0xc8, 0xc9, 0xc9, 0xc9,
       0xc9, 0xca, 0xca, 0xca, 0xcb, 0xcb, 0xcb, 0xcb, 0xcc, 0xcc, 0xcc,
       0xcc, 0xcd, 0xcd, 0xcd, 0xce, 0xce, 0xce, 0xce, 0xcf, 0xcf, 0xd8,
       0xd8, 0xd8, 0xd9, 0xd9, 0xd9, 0xda, 0xda, 0xda, 0xda, 0xdb, 0xdb,
       0xdb, 0xdb, 0xdc, 0xdc, 0xdc, 0xdd, 0xdd, 0xdd, 0xdd, 0xde, 0xde,
       0xde, 0xdf, 0xdf, 0xdf, 0xdf, 0xe0, 0xe0, 0xe0, 0xe1, 0xea, 0xea,
       0xea, 0xeb, 0xeb, 0xeb, 0xec, 0xec, 0xec, 0xec, 0xed, 0xed, 0xed,
       0xee, 0xee, 0xee, 0xef, 0xef, 0xef, 0xef, 0xf0, 0xf0, 0xf0, 0xf1,
       0xf1, 0xf1, 0xf1, 0xf2, 0xf2, 0xf2, 0xf3, 0xf3, 0xfd, 0xfd, 0xfd,
       0xfd, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0x100, 0x100, 0x100,
       0x101, 0x101, 0x101, 0x101, 0x102, 0x102, 0x102, 0x103, 0x103,
       0x103, 0x104, 0x104, 0x104, 0x104, 0x105, 0x105, 0x105, 0x106,
       0x106, 0x110, 0x110, 0x111, 0x111, 0x111, 0x112, 0x112, 0x112,
       0x113, 0x113, 0x113, 0x113, 0x114, 0x114, 0x114, 0x115, 0x115,
       0x115, 0x116, 0x116, 0x116, 0x117, 0x117, 0x117, 0x118, 0x118,
       0x118, 0x119, 0x119, 0x119, 0x119, 0x11a, 0x124, 0x125, 0x125,
       0x125, 0x125, 0x126, 0x126, 0x126, 0x127, 0x127, 0x127, 0x128,
       0x128, 0x128, 0x129, 0x129, 0x129, 0x12a, 0x12a, 0x12a, 0x12b,
       0x12b, 0x12b, 0x12c, 0x12c, 0x12c, 0x12d, 0x12d, 0x12d, 0x12e,
       0x12e, 0x12e, 0x139, 0x139, 0x13a, 0x13a, 0x13a, 0x13b, 0x13b,
       0x13b, 0x13c, 0x13c, 0x13c, 0x13d, 0x13d, 0x13d, 0x13e, 0x13e,
       0x13e, 0x13f, 0x13f, 0x140, 0x140, 0x140, 0x141, 0x141, 0x141,
       0x142, 0x142, 0x142, 0x143, 0x143, 0x143, 0x144, 0x14f, 0x14f,
       0x14f, 0x150, 0x150, 0x150, 0x151, 0x151, 0x151, 0x152, 0x152,
       0x153, 0x153, 0x153, 0x154, 0x154, 0x154, 0x155, 0x155, 0x155,
       0x156, 0x156, 0x156, 0x157, 0x157, 0x157, 0x158, 0x158, 0x158,
       0x159, 0x159, 0x15a, 0x165, 0x165, 0x166, 0x166, 0x166, 0x167,
       0x167])
    if (x >= len(vals)):
        return vals[-1]
    return vals[x]
