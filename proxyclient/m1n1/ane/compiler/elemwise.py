# SPDX-License-Identifier: MIT

from enum import IntEnum
from m1n1.ane.ane_utils import pow2log2

class E_ELEMWISE_MODE(IntEnum): 
    ADD  = 0x0
    MULT = 0x4
    MAX  = 0x8
    MIN  = 0xc

def elemwise_transform(input_size, mode): 
    td_magic = elemwise_1d_input_T(input_size)
    td_magic[0x22c//4] = 0x80000 | E_ELEMWISE_MODE[mode]
    return td_magic

def elemwise_1d_input_T(input_size):
    # got bored after lol
    assert(1 <= input_size <= 4000)

    td_magic = [
        0x2000000, 0x0, 0x422, 0x0, 0xfff86a, 0x0, 0x30009800, 0x0,
        0x249a5, 0x0, 0xf401f800, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x3c000000, 0x10001, 0x1, 0x2a, 0x1, 0x1, 0x10001,
        0x1, 0x5000a021, 0x2041, 0x10001, 0x1, 0x4, 0x0, 0x33,
        0x0, 0x0, 0x6c013800, 0x33881, 0x33880, 0x0, 0x40, 0x40,
        0x40, 0x40, 0x0, 0x40, 0x40, 0x40, 0x40, 0x0,
        0x0, 0x1002031, 0x2030, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44004800,
        0x0, 0x1500172, 0x0, 0x10, 0x20, 0x10, 0x10, 0x40,
        0x10, 0x20, 0x10, 0x10, 0x50017a, 0x60, 0x0, 0x0,
        0x0, 0x0, 0xc008800, 0x80000, 0x3c000000, 0x3c000000, 0x3f800000, 0x1000c800,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x18017800, 0x40000c1, 0x0,
        0x40, 0x40, 0x40, 0x40, 0x1302031,
    ]

    batch = ((input_size-1)//8)
    
    td_magic[0x128//4] = input_size * 0x1 | 0x10000
    td_magic[0x13c//4] = input_size * 0x1 | 0x10000
    td_magic[0x154//4] += pow2log2(batch)
    if (batch >= 32):
        td_magic[0x154//4] = 0x9

    td_magic[0x1ec//4] *= (batch + 1)
    td_magic[0x1f4//4] *= (batch + 1)
    td_magic[0x1f8//4] *= (batch + 1)
    td_magic[0x200//4] *= (batch + 1)
    td_magic[0x208//4] *= (batch + 1)
    td_magic[0x20c//4] *= (batch + 1)
    
    if (batch >= 2):
        td_magic[0x1f0//4] += (batch - 1)*0x10
        td_magic[0x204//4] += (batch - 1)*0x10
        td_magic[0x214//4] += (batch - 1)*0x10
        
        if (batch >= 4):
            td_magic[0x178//4] += 0x40 * (batch//4)
            td_magic[0x17c//4] += 0x40 * (batch//4)
            td_magic[0x180//4] += 0x40 * (batch//4)
            td_magic[0x184//4] += 0x40 * (batch//4)
            td_magic[0x188//4] = 0
            td_magic[0x18c//4] += 0x40 * (batch//4)
            td_magic[0x190//4] += 0x40 * (batch//4)
            td_magic[0x194//4] += 0x40 * (batch//4)
            td_magic[0x198//4] += 0x40 * (batch//4)
            td_magic[0x19c//4] = 0

            td_magic[0x1fc//4] += (batch - 3)*0x10
            td_magic[0x214//4] += (batch - 3)*0x10
            if (batch >= 60):
                td_magic[0x1fc//4] = 0x440
                td_magic[0x214//4] = 0x800 + ((batch-60+1)*0x10)
            
            td_magic[0x260//4] += 0x40 * (batch//4)
            td_magic[0x264//4] += 0x40 * (batch//4)
            td_magic[0x268//4] += 0x40 * (batch//4)
            td_magic[0x26c//4] += 0x40 * (batch//4)

            if (batch >= 64):
                td_magic[0x1f4//4] = 0x400
                td_magic[0x1f8//4] = 0x400
                td_magic[0x1ec//4] = 0x400
                td_magic[0x200//4] = 0x400
                td_magic[0x208//4] = 0x400
                td_magic[0x20c//4] = 0x400

                rnges = [(64*n, 64*n+5) for n in range(1,50)]
                if any((start <= batch <= end) for (start, end) in rnges):
                    td_magic[0x1f0//4] = 0x420
                    td_magic[0x204//4] = 0x420
                    td_magic[0x214//4] = 0x860
                else:
                    td_magic[0x1f0//4] = 0x400
                    td_magic[0x204//4] = 0x400
                    td_magic[0x214//4] = 0x840

    return td_magic
